
optiboot_atmega644.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  0000fc00  0000fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  0000fffe  0000fffe  00000236  2**0
                  CONTENTS, READONLY
  2 .stab         00000b88  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a6a  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <main>:
    fc00:	0f 92       	push	r0
    fc02:	cd b7       	in	r28, 0x3d	; 61
    fc04:	de b7       	in	r29, 0x3e	; 62
    fc06:	11 24       	eor	r1, r1
    fc08:	84 b7       	in	r24, 0x34	; 52
    fc0a:	14 be       	out	0x34, r1	; 52
    fc0c:	81 ff       	sbrs	r24, 1
    fc0e:	e3 d0       	rcall	.+454    	; 0xfdd6 <appStart>
    fc10:	85 e0       	ldi	r24, 0x05	; 5
    fc12:	80 93 81 00 	sts	0x0081, r24
    fc16:	82 e0       	ldi	r24, 0x02	; 2
    fc18:	80 93 c0 00 	sts	0x00C0, r24
    fc1c:	88 e1       	ldi	r24, 0x18	; 24
    fc1e:	80 93 c1 00 	sts	0x00C1, r24
    fc22:	86 e0       	ldi	r24, 0x06	; 6
    fc24:	80 93 c2 00 	sts	0x00C2, r24
    fc28:	85 e1       	ldi	r24, 0x15	; 21
    fc2a:	80 93 c4 00 	sts	0x00C4, r24
    fc2e:	8e e0       	ldi	r24, 0x0E	; 14
    fc30:	bc d0       	rcall	.+376    	; 0xfdaa <watchdogConfig>
    fc32:	20 9a       	sbi	0x04, 0	; 4
    fc34:	26 e0       	ldi	r18, 0x06	; 6
    fc36:	8c e3       	ldi	r24, 0x3C	; 60
    fc38:	9b ef       	ldi	r25, 0xFB	; 251
    fc3a:	31 e0       	ldi	r19, 0x01	; 1
    fc3c:	90 93 85 00 	sts	0x0085, r25
    fc40:	80 93 84 00 	sts	0x0084, r24
    fc44:	36 bb       	out	0x16, r19	; 22
    fc46:	b0 9b       	sbis	0x16, 0	; 22
    fc48:	fe cf       	rjmp	.-4      	; 0xfc46 <main+0x46>
    fc4a:	18 9a       	sbi	0x03, 0	; 3
    fc4c:	a8 95       	wdr
    fc4e:	21 50       	subi	r18, 0x01	; 1
    fc50:	a9 f7       	brne	.-22     	; 0xfc3c <main+0x3c>
    fc52:	88 24       	eor	r8, r8
    fc54:	99 24       	eor	r9, r9
    fc56:	cc 24       	eor	r12, r12
    fc58:	c3 94       	inc	r12
    fc5a:	f5 e0       	ldi	r31, 0x05	; 5
    fc5c:	df 2e       	mov	r13, r31
    fc5e:	e1 e1       	ldi	r30, 0x11	; 17
    fc60:	ee 2e       	mov	r14, r30
    fc62:	73 e0       	ldi	r23, 0x03	; 3
    fc64:	f7 2e       	mov	r15, r23
    fc66:	95 d0       	rcall	.+298    	; 0xfd92 <getch>
    fc68:	81 34       	cpi	r24, 0x41	; 65
    fc6a:	69 f4       	brne	.+26     	; 0xfc86 <main+0x86>
    fc6c:	92 d0       	rcall	.+292    	; 0xfd92 <getch>
    fc6e:	89 83       	std	Y+1, r24	; 0x01
    fc70:	a2 d0       	rcall	.+324    	; 0xfdb6 <verifySpace>
    fc72:	89 81       	ldd	r24, Y+1	; 0x01
    fc74:	82 38       	cpi	r24, 0x82	; 130
    fc76:	11 f1       	breq	.+68     	; 0xfcbc <main+0xbc>
    fc78:	81 38       	cpi	r24, 0x81	; 129
    fc7a:	11 f4       	brne	.+4      	; 0xfc80 <main+0x80>
    fc7c:	85 e0       	ldi	r24, 0x05	; 5
    fc7e:	01 c0       	rjmp	.+2      	; 0xfc82 <main+0x82>
    fc80:	83 e0       	ldi	r24, 0x03	; 3
    fc82:	80 d0       	rcall	.+256    	; 0xfd84 <putch>
    fc84:	7c c0       	rjmp	.+248    	; 0xfd7e <main+0x17e>
    fc86:	82 34       	cpi	r24, 0x42	; 66
    fc88:	11 f4       	brne	.+4      	; 0xfc8e <main+0x8e>
    fc8a:	84 e1       	ldi	r24, 0x14	; 20
    fc8c:	03 c0       	rjmp	.+6      	; 0xfc94 <main+0x94>
    fc8e:	85 34       	cpi	r24, 0x45	; 69
    fc90:	19 f4       	brne	.+6      	; 0xfc98 <main+0x98>
    fc92:	85 e0       	ldi	r24, 0x05	; 5
    fc94:	98 d0       	rcall	.+304    	; 0xfdc6 <getNch>
    fc96:	73 c0       	rjmp	.+230    	; 0xfd7e <main+0x17e>
    fc98:	85 35       	cpi	r24, 0x55	; 85
    fc9a:	61 f4       	brne	.+24     	; 0xfcb4 <main+0xb4>
    fc9c:	7a d0       	rcall	.+244    	; 0xfd92 <getch>
    fc9e:	08 2f       	mov	r16, r24
    fca0:	10 e0       	ldi	r17, 0x00	; 0
    fca2:	77 d0       	rcall	.+238    	; 0xfd92 <getch>
    fca4:	90 e0       	ldi	r25, 0x00	; 0
    fca6:	98 2e       	mov	r9, r24
    fca8:	88 24       	eor	r8, r8
    fcaa:	80 2a       	or	r8, r16
    fcac:	91 2a       	or	r9, r17
    fcae:	88 0c       	add	r8, r8
    fcb0:	99 1c       	adc	r9, r9
    fcb2:	64 c0       	rjmp	.+200    	; 0xfd7c <main+0x17c>
    fcb4:	86 35       	cpi	r24, 0x56	; 86
    fcb6:	21 f4       	brne	.+8      	; 0xfcc0 <main+0xc0>
    fcb8:	84 e0       	ldi	r24, 0x04	; 4
    fcba:	85 d0       	rcall	.+266    	; 0xfdc6 <getNch>
    fcbc:	80 e0       	ldi	r24, 0x00	; 0
    fcbe:	e1 cf       	rjmp	.-62     	; 0xfc82 <main+0x82>
    fcc0:	84 36       	cpi	r24, 0x64	; 100
    fcc2:	09 f0       	breq	.+2      	; 0xfcc6 <main+0xc6>
    fcc4:	40 c0       	rjmp	.+128    	; 0xfd46 <main+0x146>
    fcc6:	65 d0       	rcall	.+202    	; 0xfd92 <getch>
    fcc8:	64 d0       	rcall	.+200    	; 0xfd92 <getch>
    fcca:	b8 2e       	mov	r11, r24
    fccc:	62 d0       	rcall	.+196    	; 0xfd92 <getch>
    fcce:	80 e0       	ldi	r24, 0x00	; 0
    fcd0:	88 16       	cp	r8, r24
    fcd2:	80 ee       	ldi	r24, 0xE0	; 224
    fcd4:	98 06       	cpc	r9, r24
    fcd6:	18 f4       	brcc	.+6      	; 0xfcde <main+0xde>
    fcd8:	f4 01       	movw	r30, r8
    fcda:	f7 be       	out	0x37, r15	; 55
    fcdc:	e8 95       	spm
    fcde:	00 e0       	ldi	r16, 0x00	; 0
    fce0:	11 e0       	ldi	r17, 0x01	; 1
    fce2:	57 d0       	rcall	.+174    	; 0xfd92 <getch>
    fce4:	f8 01       	movw	r30, r16
    fce6:	81 93       	st	Z+, r24
    fce8:	8f 01       	movw	r16, r30
    fcea:	be 16       	cp	r11, r30
    fcec:	d1 f7       	brne	.-12     	; 0xfce2 <main+0xe2>
    fcee:	f0 e0       	ldi	r31, 0x00	; 0
    fcf0:	8f 16       	cp	r8, r31
    fcf2:	f0 ee       	ldi	r31, 0xE0	; 224
    fcf4:	9f 06       	cpc	r9, r31
    fcf6:	18 f0       	brcs	.+6      	; 0xfcfe <main+0xfe>
    fcf8:	f4 01       	movw	r30, r8
    fcfa:	f7 be       	out	0x37, r15	; 55
    fcfc:	e8 95       	spm
    fcfe:	5b d0       	rcall	.+182    	; 0xfdb6 <verifySpace>
    fd00:	07 b6       	in	r0, 0x37	; 55
    fd02:	00 fc       	sbrc	r0, 0
    fd04:	fd cf       	rjmp	.-6      	; 0xfd00 <main+0x100>
    fd06:	f4 01       	movw	r30, r8
    fd08:	a0 e0       	ldi	r26, 0x00	; 0
    fd0a:	b1 e0       	ldi	r27, 0x01	; 1
    fd0c:	2c 91       	ld	r18, X
    fd0e:	30 e0       	ldi	r19, 0x00	; 0
    fd10:	11 96       	adiw	r26, 0x01	; 1
    fd12:	8c 91       	ld	r24, X
    fd14:	11 97       	sbiw	r26, 0x01	; 1
    fd16:	90 e0       	ldi	r25, 0x00	; 0
    fd18:	98 2f       	mov	r25, r24
    fd1a:	88 27       	eor	r24, r24
    fd1c:	82 2b       	or	r24, r18
    fd1e:	93 2b       	or	r25, r19
    fd20:	12 96       	adiw	r26, 0x02	; 2
    fd22:	0c 01       	movw	r0, r24
    fd24:	c7 be       	out	0x37, r12	; 55
    fd26:	e8 95       	spm
    fd28:	11 24       	eor	r1, r1
    fd2a:	32 96       	adiw	r30, 0x02	; 2
    fd2c:	82 e0       	ldi	r24, 0x02	; 2
    fd2e:	a0 30       	cpi	r26, 0x00	; 0
    fd30:	b8 07       	cpc	r27, r24
    fd32:	61 f7       	brne	.-40     	; 0xfd0c <main+0x10c>
    fd34:	f4 01       	movw	r30, r8
    fd36:	d7 be       	out	0x37, r13	; 55
    fd38:	e8 95       	spm
    fd3a:	07 b6       	in	r0, 0x37	; 55
    fd3c:	00 fc       	sbrc	r0, 0
    fd3e:	fd cf       	rjmp	.-6      	; 0xfd3a <main+0x13a>
    fd40:	e7 be       	out	0x37, r14	; 55
    fd42:	e8 95       	spm
    fd44:	1c c0       	rjmp	.+56     	; 0xfd7e <main+0x17e>
    fd46:	84 37       	cpi	r24, 0x74	; 116
    fd48:	61 f4       	brne	.+24     	; 0xfd62 <main+0x162>
    fd4a:	23 d0       	rcall	.+70     	; 0xfd92 <getch>
    fd4c:	22 d0       	rcall	.+68     	; 0xfd92 <getch>
    fd4e:	08 2f       	mov	r16, r24
    fd50:	20 d0       	rcall	.+64     	; 0xfd92 <getch>
    fd52:	31 d0       	rcall	.+98     	; 0xfdb6 <verifySpace>
    fd54:	f4 01       	movw	r30, r8
    fd56:	85 91       	lpm	r24, Z+
    fd58:	4f 01       	movw	r8, r30
    fd5a:	14 d0       	rcall	.+40     	; 0xfd84 <putch>
    fd5c:	01 50       	subi	r16, 0x01	; 1
    fd5e:	d1 f7       	brne	.-12     	; 0xfd54 <main+0x154>
    fd60:	0e c0       	rjmp	.+28     	; 0xfd7e <main+0x17e>
    fd62:	85 37       	cpi	r24, 0x75	; 117
    fd64:	39 f4       	brne	.+14     	; 0xfd74 <main+0x174>
    fd66:	27 d0       	rcall	.+78     	; 0xfdb6 <verifySpace>
    fd68:	8e e1       	ldi	r24, 0x1E	; 30
    fd6a:	0c d0       	rcall	.+24     	; 0xfd84 <putch>
    fd6c:	86 e9       	ldi	r24, 0x96	; 150
    fd6e:	0a d0       	rcall	.+20     	; 0xfd84 <putch>
    fd70:	89 e0       	ldi	r24, 0x09	; 9
    fd72:	87 cf       	rjmp	.-242    	; 0xfc82 <main+0x82>
    fd74:	81 35       	cpi	r24, 0x51	; 81
    fd76:	11 f4       	brne	.+4      	; 0xfd7c <main+0x17c>
    fd78:	88 e0       	ldi	r24, 0x08	; 8
    fd7a:	17 d0       	rcall	.+46     	; 0xfdaa <watchdogConfig>
    fd7c:	1c d0       	rcall	.+56     	; 0xfdb6 <verifySpace>
    fd7e:	80 e1       	ldi	r24, 0x10	; 16
    fd80:	01 d0       	rcall	.+2      	; 0xfd84 <putch>
    fd82:	71 cf       	rjmp	.-286    	; 0xfc66 <main+0x66>

0000fd84 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    fd84:	90 91 c0 00 	lds	r25, 0x00C0
    fd88:	95 ff       	sbrs	r25, 5
    fd8a:	fc cf       	rjmp	.-8      	; 0xfd84 <putch>
  UART_UDR = ch;
    fd8c:	80 93 c6 00 	sts	0x00C6, r24
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    fd90:	08 95       	ret

0000fd92 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    fd92:	80 91 c0 00 	lds	r24, 0x00C0
    fd96:	87 ff       	sbrs	r24, 7
    fd98:	fc cf       	rjmp	.-8      	; 0xfd92 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    fd9a:	80 91 c0 00 	lds	r24, 0x00C0
    fd9e:	84 fd       	sbrc	r24, 4
    fda0:	01 c0       	rjmp	.+2      	; 0xfda4 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fda2:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    fda4:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fda8:	08 95       	ret

0000fdaa <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fdaa:	e0 e6       	ldi	r30, 0x60	; 96
    fdac:	f0 e0       	ldi	r31, 0x00	; 0
    fdae:	98 e1       	ldi	r25, 0x18	; 24
    fdb0:	90 83       	st	Z, r25
  WDTCSR = x;
    fdb2:	80 83       	st	Z, r24
}
    fdb4:	08 95       	ret

0000fdb6 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    fdb6:	ed df       	rcall	.-38     	; 0xfd92 <getch>
    fdb8:	80 32       	cpi	r24, 0x20	; 32
    fdba:	19 f0       	breq	.+6      	; 0xfdc2 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    fdbc:	88 e0       	ldi	r24, 0x08	; 8
    fdbe:	f5 df       	rcall	.-22     	; 0xfdaa <watchdogConfig>
    fdc0:	ff cf       	rjmp	.-2      	; 0xfdc0 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    fdc2:	84 e1       	ldi	r24, 0x14	; 20
    fdc4:	df cf       	rjmp	.-66     	; 0xfd84 <putch>

0000fdc6 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fdc6:	1f 93       	push	r17
    fdc8:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    fdca:	e3 df       	rcall	.-58     	; 0xfd92 <getch>
    fdcc:	11 50       	subi	r17, 0x01	; 1
    fdce:	e9 f7       	brne	.-6      	; 0xfdca <getNch+0x4>
  verifySpace();
    fdd0:	f2 df       	rcall	.-28     	; 0xfdb6 <verifySpace>
}
    fdd2:	1f 91       	pop	r17
    fdd4:	08 95       	ret

0000fdd6 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    fdd6:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    fdd8:	80 e0       	ldi	r24, 0x00	; 0
    fdda:	e7 df       	rcall	.-50     	; 0xfdaa <watchdogConfig>
  __asm__ __volatile__ (
    fddc:	ee 27       	eor	r30, r30
    fdde:	ff 27       	eor	r31, r31
    fde0:	09 94       	ijmp
